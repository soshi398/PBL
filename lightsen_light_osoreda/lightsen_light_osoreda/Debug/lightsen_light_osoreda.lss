
lightsen_light_osoreda.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d0  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000108e  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d8a  00000000  00000000  000014fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000811  00000000  00000000  00002284  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00002a98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000652  00000000  00000000  00002c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000281  00000000  00000000  00003256  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000034d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  bc:	0c 94 6a 01 	jmp	0x2d4	; 0x2d4 <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <GoTo16MHz>:
#include <avr/io.h>
#include <util/delay.h>
#include "my_lib.h"
void GoTo16MHz(void)
{
	CLKPR = 0x80;
  c4:	e1 e6       	ldi	r30, 0x61	; 97
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 e8       	ldi	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
	CLKPR = 0x00;
  cc:	10 82       	st	Z, r1
  ce:	08 95       	ret

000000d0 <main>:




int main(void)
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	00 d0       	rcall	.+0      	; 0xd6 <main+0x6>
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
	GoTo16MHz();
  da:	0e 94 62 00 	call	0xc4	; 0xc4 <GoTo16MHz>
	USART1_Init();
  de:	0e 94 4b 01 	call	0x296	; 0x296 <USART1_Init>
	AD_Init();
  e2:	0e 94 c8 00 	call	0x190	; 0x190 <AD_Init>
	uint8_t recv_data;

	DDRB |= 0x03; //PB１を出力に設定
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	83 60       	ori	r24, 0x03	; 3
  ea:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~0x03; //PB１を０にリセット
  ec:	85 b1       	in	r24, 0x05	; 5
  ee:	8c 7f       	andi	r24, 0xFC	; 252
  f0:	85 b9       	out	0x05, r24	; 5
	
	int light=5000;

	
	//ボードPC７（オンボードLED用）の向きを出力
	DDRC |= 0b10000000;
  f2:	87 b1       	in	r24, 0x07	; 7
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~0b10000000; //オンボードLEDを消灯
  f8:	88 b1       	in	r24, 0x08	; 8
  fa:	8f 77       	andi	r24, 0x7F	; 127
  fc:	88 b9       	out	0x08, r24	; 8
	PWM16_Init(4000); //PWM16の基本設定 周期は20ms(=40000?0.5us)
  fe:	80 ea       	ldi	r24, 0xA0	; 160
 100:	9f e0       	ldi	r25, 0x0F	; 15
 102:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <PWM16_Init>
	uint8_t recv_data;

	DDRB |= 0x03; //PB１を出力に設定
	PORTB &= ~0x03; //PB１を０にリセット
	
	int light=5000;
 106:	0f 2e       	mov	r0, r31
 108:	f8 e8       	ldi	r31, 0x88	; 136
 10a:	cf 2e       	mov	r12, r31
 10c:	f3 e1       	ldi	r31, 0x13	; 19
 10e:	df 2e       	mov	r13, r31
 110:	f0 2d       	mov	r31, r0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	89 e6       	ldi	r24, 0x69	; 105
 116:	98 e1       	ldi	r25, 0x18	; 24
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x48>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x52>
 122:	00 00       	nop

	/* Replace with your application code */
	while (1)
	{
		_delay_ms(500);
		PINC = 0b10000000; //オンボードLEDを反転
 124:	80 e8       	ldi	r24, 0x80	; 128
 126:	86 b9       	out	0x06, r24	; 6

		recv_data = UART1_Byte_Recv();
 128:	0e 94 63 01 	call	0x2c6	; 0x2c6 <UART1_Byte_Recv>
 12c:	f8 2e       	mov	r15, r24
		uint16_t ad_data[1];
		
		ad_data[0] = ADC_Read(0);
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <ADC_Read>
 134:	9a 83       	std	Y+2, r25	; 0x02
 136:	89 83       	std	Y+1, r24	; 0x01
		
		for(int i = 0; i < 1; i++){
 138:	00 e0       	ldi	r16, 0x00	; 0
 13a:	10 e0       	ldi	r17, 0x00	; 0
 13c:	12 c0       	rjmp	.+36     	; 0x162 <main+0x92>
			UART1_Byte_Send(ad_data[i]);
 13e:	f8 01       	movw	r30, r16
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	8c 0f       	add	r24, r28
 14a:	9d 1f       	adc	r25, r29
 14c:	e8 0f       	add	r30, r24
 14e:	f9 1f       	adc	r31, r25
 150:	e1 80       	ldd	r14, Z+1	; 0x01
 152:	80 81       	ld	r24, Z
 154:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <UART1_Byte_Send>
			UART1_Byte_Send(ad_data[i] >>8);
 158:	8e 2d       	mov	r24, r14
 15a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <UART1_Byte_Send>
		recv_data = UART1_Byte_Recv();
		uint16_t ad_data[1];
		
		ad_data[0] = ADC_Read(0);
		
		for(int i = 0; i < 1; i++){
 15e:	0f 5f       	subi	r16, 0xFF	; 255
 160:	1f 4f       	sbci	r17, 0xFF	; 255
 162:	10 16       	cp	r1, r16
 164:	11 06       	cpc	r1, r17
 166:	5c f7       	brge	.-42     	; 0x13e <main+0x6e>
			UART1_Byte_Send(ad_data[i]);
			UART1_Byte_Send(ad_data[i] >>8);
		}
		
		if(recv_data == 0){
 168:	f1 10       	cpse	r15, r1
 16a:	04 c0       	rjmp	.+8      	; 0x174 <main+0xa4>
			light = light -100;
 16c:	94 e6       	ldi	r25, 0x64	; 100
 16e:	c9 1a       	sub	r12, r25
 170:	d1 08       	sbc	r13, r1
 172:	06 c0       	rjmp	.+12     	; 0x180 <main+0xb0>
			
		}else if (recv_data == 1){
 174:	21 e0       	ldi	r18, 0x01	; 1
 176:	f2 12       	cpse	r15, r18
 178:	03 c0       	rjmp	.+6      	; 0x180 <main+0xb0>
			light = light + 100;
 17a:	84 e6       	ldi	r24, 0x64	; 100
 17c:	c8 0e       	add	r12, r24
 17e:	d1 1c       	adc	r13, r1
		}else{
			
		}
		
		
		PWM16_PulseWidth(0b0001,light); //OC1Aのパルス幅を(=lightset?0.5us)
 180:	b6 01       	movw	r22, r12
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	0e 94 15 01 	call	0x22a	; 0x22a <PWM16_PulseWidth>
		PWM16_Start(0b0001) ;//OC1Aの出力開始
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 2e 01 	call	0x25c	; 0x25c <PWM16_Start>





	}
 18e:	c1 cf       	rjmp	.-126    	; 0x112 <main+0x42>

00000190 <AD_Init>:
#include <avr/io.h>

void AD_Init( void )
{
	// ADCの初期化
	ADMUX = 0 ;// 電源5V(AVref)を使用, データ右詰め
 190:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA |= _BV(ADPS2) | _BV(ADPS0); // ADEN, ADSC, CK/32
 194:	ea e7       	ldi	r30, 0x7A	; 122
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	85 60       	ori	r24, 0x05	; 5
 19c:	80 83       	st	Z, r24
 19e:	08 95       	ret

000001a0 <selADchannel>:

void selADchannel(uint8_t x)
{
	uint8_t tmp ;
	
	ADCSRA &= ~_BV(ADEN); // ADCを禁止
 1a0:	ea e7       	ldi	r30, 0x7A	; 122
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	90 81       	ld	r25, Z
 1a6:	9f 77       	andi	r25, 0x7F	; 127
 1a8:	90 83       	st	Z, r25
	
	/* judge */
	if ( x > 15 ) return ;
 1aa:	80 31       	cpi	r24, 0x10	; 16
 1ac:	58 f4       	brcc	.+22     	; 0x1c4 <selADchannel+0x24>
	/* get now mode */
	tmp = ADMUX ;
 1ae:	ec e7       	ldi	r30, 0x7C	; 124
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	90 81       	ld	r25, Z
	/* clear multiplexer */
	tmp &= 0xf0 ;
 1b4:	90 7f       	andi	r25, 0xF0	; 240
	/* select new channel */
	ADMUX = tmp | x ;
 1b6:	89 2b       	or	r24, r25
 1b8:	80 83       	st	Z, r24
	
	ADCSRA |= _BV(ADEN); // ADCを許可
 1ba:	ea e7       	ldi	r30, 0x7A	; 122
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	80 68       	ori	r24, 0x80	; 128
 1c2:	80 83       	st	Z, r24
 1c4:	08 95       	ret

000001c6 <ADC_Read>:
}

uint16_t ADC_Read( uint8_t ch_num )
{
	selADchannel(ch_num); // ADCのチャンネルを選択
 1c6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <selADchannel>
	ADCSRA |= _BV(ADSC);     // ADをスタート
 1ca:	ea e7       	ldi	r30, 0x7A	; 122
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	80 64       	ori	r24, 0x40	; 64
 1d2:	80 83       	st	Z, r24
	while( (ADCSRA & _BV(ADIF)) == 0 ); // AD変換の終了を待つ
 1d4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1d8:	84 ff       	sbrs	r24, 4
 1da:	fc cf       	rjmp	.-8      	; 0x1d4 <ADC_Read+0xe>
	ADCSRA &= ~_BV(ADIF); // 終了フラグのリセット
 1dc:	ea e7       	ldi	r30, 0x7A	; 122
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	8f 7e       	andi	r24, 0xEF	; 239
 1e4:	80 83       	st	Z, r24
	return ( ADC & 0x3ff ); // AD変換結果を返す．
 1e6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1ea:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 1ee:	93 70       	andi	r25, 0x03	; 3
 1f0:	08 95       	ret

000001f2 <PWM16_Init>:
void PWM16_Init( uint16_t width ) // width = 周期/0.5us
                                  // 0   <= width <= 65535
								  // 0ms <= 周期  <= 32.8ms 
{
	//タイマ/カウンタ1制御レジスタA
	TCCR1A = 0b00000010;  //7-6: 00 (OC1Aの波形出力無し)
 1f2:	52 e0       	ldi	r21, 0x02	; 2
 1f4:	50 93 80 00 	sts	0x0080, r21	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	                      //5-4: 00 (OC1Bの波形出力無し)
						  //3-2: 00 (OC1Cの波形出力無し)
						  //1-0: 10 (高速PWM動作:最大値ICR1)
	//タイマ/カウンタ1制御レジスタB
	TCCR1B = 0b00011010;  //7-5:  00 (未使用)
 1f8:	4a e1       	ldi	r20, 0x1A	; 26
 1fa:	40 93 81 00 	sts	0x0081, r20	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	                      //4-3:  11 (高速PWM動作:最大値ICR1)
	                      //2-0: 010 (分周1/8)
						  
	// 1周期分のカウント値 	  	
	ICR1 = width - 1; 
 1fe:	9c 01       	movw	r18, r24
 200:	21 50       	subi	r18, 0x01	; 1
 202:	31 09       	sbc	r19, r1
 204:	30 93 87 00 	sts	0x0087, r19	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 208:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	
	//PB5(OC1A), PB6(OC1B), PB7(OC1C)の向きを出力
	DDRB |= 0b11100000;
 20c:	94 b1       	in	r25, 0x04	; 4
 20e:	90 6e       	ori	r25, 0xE0	; 224
 210:	94 b9       	out	0x04, r25	; 4

	//タイマ/カウンタ3制御レジスタA
	TCCR3A = 0b00000010;  //7-6: 00 (OC3Aの波形出力無し)
 212:	50 93 90 00 	sts	0x0090, r21	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
 	                      //1-0: 10 (高速PWM動作:最大値ICR3)
						   
	//タイマ/カウンタ3制御レジスタB
	TCCR3B = 0b00011010;  //7-5:  00 (未使用)
 216:	40 93 91 00 	sts	0x0091, r20	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
	                      //4-3:  11 (高速PWM動作:最大値ICR3)
	                      //2-0: 010 (分周1/8)
	
	// 1周期分のカウント値
	ICR3 = width - 1;
 21a:	30 93 97 00 	sts	0x0097, r19	; 0x800097 <__TEXT_REGION_LENGTH__+0x7f8097>
 21e:	20 93 96 00 	sts	0x0096, r18	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f8096>
	
	//ポートPC6(OC3A)の向きを出力
	DDRC |= 0b01000000;
 222:	87 b1       	in	r24, 0x07	; 7
 224:	80 64       	ori	r24, 0x40	; 64
 226:	87 b9       	out	0x07, r24	; 7
 228:	08 95       	ret

0000022a <PWM16_PulseWidth>:
// OC1A(0bit), OC1B(1bit), OC1C(2bit), OC3A(3bit)出力の
// パルス幅を整数値(width)で設定
// 時間幅 = width * 0.5us
void PWM16_PulseWidth( uint8_t ch, uint16_t width)
{
	if ( (ch & 0b0001) != 0 ) OCR1A = width;
 22a:	80 ff       	sbrs	r24, 0
 22c:	04 c0       	rjmp	.+8      	; 0x236 <PWM16_PulseWidth+0xc>
 22e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 232:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	if ( (ch & 0b0010) != 0 ) OCR1B = width;
 236:	81 ff       	sbrs	r24, 1
 238:	04 c0       	rjmp	.+8      	; 0x242 <PWM16_PulseWidth+0x18>
 23a:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 23e:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	if ( (ch & 0b0100) != 0 ) OCR1C = width;
 242:	82 ff       	sbrs	r24, 2
 244:	04 c0       	rjmp	.+8      	; 0x24e <PWM16_PulseWidth+0x24>
 246:	70 93 8d 00 	sts	0x008D, r23	; 0x80008d <__TEXT_REGION_LENGTH__+0x7f808d>
 24a:	60 93 8c 00 	sts	0x008C, r22	; 0x80008c <__TEXT_REGION_LENGTH__+0x7f808c>
	if ( (ch & 0b1000) != 0 ) OCR3A = width;
 24e:	83 ff       	sbrs	r24, 3
 250:	04 c0       	rjmp	.+8      	; 0x25a <PWM16_PulseWidth+0x30>
 252:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f8099>
 256:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f8098>
 25a:	08 95       	ret

0000025c <PWM16_Start>:

//PWM出力を開始
//OC1A(0bit)，OC1B(1bit), OC1C(2bit), OC3A(3bit)
void PWM16_Start( uint8_t ch )
{
	if ( (ch & 0b0001) != 0 ) 
 25c:	80 ff       	sbrs	r24, 0
 25e:	05 c0       	rjmp	.+10     	; 0x26a <PWM16_Start+0xe>
		TCCR1A |= 0b10000000; //7-6: 10 (OC1AはコンペアマッチAでLOW)
 260:	e0 e8       	ldi	r30, 0x80	; 128
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	90 81       	ld	r25, Z
 266:	90 68       	ori	r25, 0x80	; 128
 268:	90 83       	st	Z, r25
		
	if ( (ch & 0b0010) != 0)
 26a:	81 ff       	sbrs	r24, 1
 26c:	05 c0       	rjmp	.+10     	; 0x278 <PWM16_Start+0x1c>
		TCCR1A |= 0b00100000; //5-4: 10 (OC1BはコンペアマッチBでLOW)
 26e:	e0 e8       	ldi	r30, 0x80	; 128
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	90 81       	ld	r25, Z
 274:	90 62       	ori	r25, 0x20	; 32
 276:	90 83       	st	Z, r25

	if ( (ch & 0b0100) != 0)
 278:	82 ff       	sbrs	r24, 2
 27a:	05 c0       	rjmp	.+10     	; 0x286 <PWM16_Start+0x2a>
		TCCR1A |= 0b00001000; //3-2: 10 (OC1CはコンペアマッチCでLOW)
 27c:	e0 e8       	ldi	r30, 0x80	; 128
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	90 81       	ld	r25, Z
 282:	98 60       	ori	r25, 0x08	; 8
 284:	90 83       	st	Z, r25
	
	if ( (ch & 0b1000) != 0)
 286:	83 ff       	sbrs	r24, 3
 288:	05 c0       	rjmp	.+10     	; 0x294 <PWM16_Start+0x38>
		TCCR3A |= 0b10000000; //7-6: 10 (OC3AはコンペアマッチAでLOW)	
 28a:	e0 e9       	ldi	r30, 0x90	; 144
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	80 68       	ori	r24, 0x80	; 128
 292:	80 83       	st	Z, r24
 294:	08 95       	ret

00000296 <USART1_Init>:
#include <avr/io.h>

 // シリアル通信の設定 (115.2kbps)
 void USART1_Init( void )
 {
	 UBRR1  = 8; // 動作周波数(Hz) / (ボーレート * 16) - 1
 296:	88 e0       	ldi	r24, 0x08	; 8
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 29e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
	 UCSR1A = 0b00000000;
 2a2:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
	 UCSR1B = 0b00011000; // 送受信可
 2a6:	88 e1       	ldi	r24, 0x18	; 24
 2a8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
	 UCSR1C = 0b00000110; // データ8bit, 非同期, パリティなし, Stop 1bit
 2ac:	86 e0       	ldi	r24, 0x06	; 6
 2ae:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
	 //UCSR1D = 0b00000010; // flow control : CTS有効
	 UCSR1D = 0b00000000; // flow control : CTS無効
 2b2:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <__TEXT_REGION_LENGTH__+0x7f80cb>
 2b6:	08 95       	ret

000002b8 <UART1_Byte_Send>:
 }

 // UART1へのバイトデータの送信
 void UART1_Byte_Send ( uint8_t data )
 {
	 while( ( UCSR1A & ( 1 << UDRE1 ) ) == 0 ); // 送信可フラグが立つまで待つ．
 2b8:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 2bc:	95 ff       	sbrs	r25, 5
 2be:	fc cf       	rjmp	.-8      	; 0x2b8 <UART1_Byte_Send>
	 UDR1 = data;
 2c0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 2c4:	08 95       	ret

000002c6 <UART1_Byte_Recv>:
 }

 // UART1からバイトデータの受信
 uint8_t UART1_Byte_Recv ( void )
 {
	 while( ( UCSR1A & 0b10000000 ) == 0 );  // 受信フラグが立つまで待つ．
 2c6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 2ca:	88 23       	and	r24, r24
 2cc:	e4 f7       	brge	.-8      	; 0x2c6 <UART1_Byte_Recv>

	 return UDR1; // UART1の受信レジスタの内容を返す．
 2ce:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 }
 2d2:	08 95       	ret

000002d4 <_exit>:
 2d4:	f8 94       	cli

000002d6 <__stop_program>:
 2d6:	ff cf       	rjmp	.-2      	; 0x2d6 <__stop_program>
